<project>
  <property environment="ENV"/>
  <property name="jameleon.home" value="../jameleon-core"/>
  <property file="build.properties"/>
  <property name="jdk.version" value="1.7"/>
  
  <path id="jameleon.classpath">
    <fileset dir="${jameleon.home}/lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${jameleon.home}/Dist">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <path id="classpath">
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${jameleon.home}/../../../../../lib">
      <include name="*.jar"/>
    </fileset>
    <path refid="jameleon.classpath"/>
  </path>
  
  <path id="test.classpath">
    <path refid="classpath"/>
    <pathelement location="${tst.dir}/res"/>
    <pathelement location="${tst.dir}/java"/>
    <pathelement location="${build.dir}"/>
    <pathelement location="C:\C2CRIDev\C2CRIBuildDir\projects\C2C-RI\src\jameleon-test-suite-3_3-RC1-C2CRI\jameleon-core\Build\ant"/>
    <fileset dir="${ENV.JAVA_HOME}/lib">
      <include name="tools.jar"/>
    </fileset>
    <fileset dir="${tst.dir}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <path id="gui.classpath">
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${dist.dir}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${tst.dir}/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${tst.dir}/lib"/>
    <path refid="jameleon.classpath"/>
  </path>
  
  <path id="classpath.with.ant">
    <fileset dir="${jameleon.home}/lib/ant">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${ENV.JAVA_HOME}/lib">
      <include name="tools.jar"/>
    </fileset>
    <path refid="classpath"/>
  </path>

  <target name="run.gui" depends="copyJameleonConf" description="Runs the GUI">
    <java classname="net.sf.jameleon.ui.JameleonUI"
          classpathref="gui.classpath"
          fork="true"/>
  </target>

  <target name="init" description="creates the needed directories" >
    <mkdir dir="${build.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="lib" />
    <mkdir dir="tst/lib" />
    <mkdir dir="res" />
    <mkdir dir="tst/java" />
    <mkdir dir="src/java" />
    <tstamp/>
  </target>
  
  <target name="init.taskdefs" description="Intializes Task Definitions used by this build">
    <!--JAMELEON TASK DEFS -->
    <taskdef resource="ant/JameleonAntTasks.properties" format="properties" classpathref="test.classpath"/>
    <!--END JAMELEON TASK DEFS -->
  </target>

  <target name="gen.syntax.reference" depends="init.taskdefs" if="genSyntaxRef">
    <gen-syntax-ref
      plugin="${projectTag}">
        <templateParam name="pluginName" value="${pluginName}"/>
    </gen-syntax-ref>
  </target>

  <target name="build" depends="init"
          description="This should not be called independently.">
    
    <javac srcdir="src/java"
           destdir="${build.dir}"
           debug="on"
           deprecation="off"
           optimize="on"
           source="${jdk.version}"
           classpathref="classpath"
           failonerror="false"/>
  </target>  
 
  <target name="build.tst" depends="init, register.functions.tst"
          description="This should not be called independently.">
  
    <javac srcdir="tst/java"
           debug="on"
           deprecation="off"
           optimize="on"
           source="${jdk.version}"
           failonerror="true">
      <classpath>
        <fileset dir="${dist.dir}">
          <include name="*.jar"/>
        </fileset>
        <path refid="test.classpath"/>
      </classpath>
    </javac>
  </target>
  
  <target name="copyRes">
    <filter token="jar.version" value="${version}"/>
    <copy todir="${build.dir}" filtering="true">
      <fileset dir="res">
        <include name="**/*.properties"/>
      </fileset>
    </copy>
    <copy todir="${build.dir}">
      <fileset dir="res">
        <include name="**/**"/>
        <exclude name="**/*.properties"/>
      </fileset>
    </copy>
  </target>
  
  <target name="copyJameleonConf">
    <copy file="tst/res/jameleon.conf" todir="${basedir}"/>
  </target>
  
  <target name="jar" depends="init"
          description="creates a jar file from the compiled code." >
  
    <manifest file="MANIFEST.MF">
      <section name="common">
        <attribute name="Specification-Title" value="Jameleon"/>
        <attribute name="Specification-Version" value="${version}"/>
        <attribute name="Implementation-Title" value="${ant.project.name}"/>
        <attribute name="Implementation-Version" value="${version} ${TODAY}"/>
      </section>
    </manifest>
    <jar jarfile="${dist.dir}/${ant.project.name}.jar"
         basedir="${build.dir}"
         manifest="MANIFEST.MF"/>
    <delete file="MANIFEST.MF"/>
  </target>
  
  <target name="javadocs" depends="main"
          description="Creates JavaDocs for this project">
    <echo message="${ENV.JAVA_HOME}"/>
    <delete dir="docs/javadocs"/>
    <mkdir dir="docs/javadocs"/>
    <javadoc packagenames="net.sf.jameleon.*"
             sourcepath="src/java"
             destdir="docs/javadocs"
             author="true"
             version="true"
             use="true"
             windowtitle="Jameleon API Documentation"
             doctitle="Jameleon API Documentation"
             access="protected"
             classpathref="classpath.with.ant">
      <bottom><![CDATA[Copyright &copy; Christian W. Hargraves.<br><img src="http://sourceforge.net/sflogo.php?group_id=84246&amp;type=1">]]></bottom>
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
      <link href="http://jakarta.apache.org/commons/jelly/apidocs/"/>
      <taglet name="net.sf.jameleon.taglet.JameleonFunctionTaglet" path="${jameleon.home}/${dist.dir}/jameleon-core.jar"/>
      <taglet name="net.sf.jameleon.taglet.JameleonStepTaglet" path="${jameleon.home}/${dist.dir}/jameleon-core.jar"/>
      <taglet name="net.sf.jameleon.taglet.JameleonAttributeTaglet" path="${jameleon.home}/${dist.dir}/jameleon-core.jar"/>
      <taglet name="net.sf.jameleon.taglet.JameleonApplicationTaglet" path="${jameleon.home}/${dist.dir}/jameleon-core.jar"/>
    </javadoc>
  </target>

  <target name="cleanSyntaxRef" if="genSyntaxRef">
      <delete file="xdocs/syntax-reference.xml"/>
  </target>

  <target name="cleanTest" >
    <mkdir dir="tst"/>
    <delete>
      <fileset dir="tst" includes="**/*.class" />
    </delete>
    <delete file="tst/res/TestCaseTagDefs.properties"/>
    <delete file="tst/res/test-plugin.properties"/>
    <delete dir="tst/_tmp" failonerror="false"/>
    <delete dir="tst/res/net" failonerror="false"/>
    <delete dir="tst/xml/_tmp" failonerror="false"/>
    <delete dir="jameleon_test_results" failonerror="false"/>
  </target>
  
  <target name="cleanDist"
          description="deletes the dist directory">
    <delete dir="${dist.dir}" />
  </target>
  
  <target name="cleanZip"
          description="deletes the dist directory">
    <delete>
      <fileset dir="." includes="*.zip"/>
    </delete>
  </target>
  
  <target name="cleanBuild"
          description="deletes the build directory">
    <delete dir="${build.dir}" />
    <delete dir="docs/javadocs" />
    <delete dir="target" />
  </target>
  
  <target name="cleanLogs"
          description="deletes the logs generated by the build">
    <delete failonerror="false">
      <fileset dir=".">
        <include name="TestRunsSummary.html*"/>
        <include name="*log*"/>
        <include name="junit*.properties"/>
        <include name="**/*~"/>
        <include name="*results.txt"/>
        <include name="**/*.log"/>
      </fileset>
    </delete>
    <delete dir="tst/unit_test_reports"/>
    <delete dir="jameleon_test_results"/>
  </target>
  
  <target name="cleanJameleonConf"
          description="deletes jameleon.conf file copied from tst/res">
    <delete failonerror="false" file="jameleon.conf"/>
  </target>
  
  <target name="clean" depends="cleanDist,cleanBuild, cleanTest,cleanLogs,cleanZip,cleanSyntaxRef,cleanJameleonConf"
          description="deletes both the dist and build directory"/>
  
  <target name="test" depends="build.tst" description="Runs JUnit tests">
    <delete dir="tst/_tmp"/>
    <condition property="tests" value="${test}">
      <not>
        <equals arg1="${test}" arg2="$${test}"/>
      </not>
    </condition>
  
    <condition property="tests" value="TestAll.class">
      <available file="tst/java/TestAll.class"/>
    </condition>
  
    <condition property="tests" value="**/*Test.class">
      <equals arg1="${tests}" arg2="$${tests}"/>
    </condition>
  
    <echo message="${tests}"/>
    <junit printsummary="off" fork="true" filtertrace="true" haltonfailure="true" forkmode="perBatch">
      <sysproperty key="basedir" value="${basedir}"/>
      <sysproperty key="visible" value="${visible}"/>
      <formatter type="brief" usefile="false"/>
      <classpath>
        <fileset dir="${dist.dir}">
          <include name="*.jar"/>
        </fileset>
        <path refid="test.classpath"/>
      </classpath>
      <batchtest todir="${tst.reports}">
        <fileset dir="tst/java">
          <include name="${tests}"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <target name="register.functions.tst" depends="copyJameleonConf, init.taskdefs" description="Register function points in the tst/src directory.">
    <condition property="tst.outputFileName" value="TestCaseTagDefs.properties">
      <equals arg1="${tst.outputFileName}" arg2="$${tst.outputFileName}"/>
    </condition>
  
    <jmln-register 
        outputdir="tst/res" 
        quiet="true" 
        isA="org.apache.commons.jelly.TagSupport"
        outputFileName="${tst.outputFileName}">
      <fileset dir="tst/java">
        <include name="**/*.java"/>
        <exclude name="**/DummyTagInvalidType.java"/>
      </fileset>
    </jmln-register>
  </target>
  
  <target name="register.functions" depends="init.taskdefs" description="Register Jameleon tags in the src/java directory">
    <jmln-register outputdir="${build.dir}"
             outputfilename="${projectTag}.properties"
       isA="org.apache.commons.jelly.TagSupport"
       quiet="true">
      <fileset dir="src/java">
        <include name="**/*.java"/>
      </fileset>
    </jmln-register>
  </target>

  <target name="test.script" depends="init.taskdefs"
          description="runs a test script or a series of matching scripts as defined by -Dscript=.">
      <condition property="throwExceptionOnFailure" value="true">
        <equals arg1="${throwExceptionOnFailure}" arg2="$${throwExceptionOnFailure}"/>
      </condition>
      <delete dir="tst/_tmp"/>
      <jmln-test throwExceptionOnFailure="${throwExceptionOnFailure}" debug="true" >
        <fileset dir="tst/">
          <include name="${script}"/>
        </fileset>
      </jmln-test>
  </target>
  
  <target name="test.macro.vm" depends="init.taskdefs" description="tests that the macro named ${macro}!">
    <delete dir="tst/_tmp"/>
    <jmln-test-vm classpathref="test.classpath" fork="true" separateVmPerScript="false" printFooter="true" failOnError="true">
      <fileset dir="tst/">
        <include name="${macro}"/>
      </fileset>
    </jmln-test-vm>
  </target>
  
  <target name="execute.testcases" depends="copyJameleonConf, init.taskdefs" description="Executes a series of test cases">
    <delete dir="tst/_tmp"/>
    <jmln-test debug="true" throwExceptionOnFailure="false" waitTimeBetweenScripts="0">
      <fileset dir="tst/xml/acceptance">
        <include name="*.xml"/>
      </fileset>
    </jmln-test>
  </target>
  
  <target name="execute.testcases.vm" depends="init.taskdefs" description="Executes a series of test cases">
    <delete dir="tst/_tmp"/>
    <jmln-test-vm debug="true" classpathref="test.classpath" fork="true" separateVmPerScript="false" printFooter="true">
      <fileset dir="tst/xml/acceptance">
        <include name="*.xml"/>
      </fileset>
    </jmln-test-vm>
  </target>
  
  <target name="package.release.src" description="creates a src release" depends="clean">
    <zip destfile="${ant.project.name}-${version}-src.zip">
      <zipfileset dir="." prefix="${ant.project.name}-${version}-src">
        <exclude name="build.sh"/>
        <exclude name="build.bat"/>
        <exclude name="lib/**"/>
        <exclude name=".vslick/**"/>
      </zipfileset>
  
      <zipfileset dir="." prefix="${ant.project.name}-${version}-src" filemode="755">
        <exclude name=".vslick/**"/>
        <include name="build.sh"/>
        <include name="build.bat"/>
        <include name="lib/**"/>
      </zipfileset>
    </zip>
  
  </target>
  
  <target name="jar.launcher.files"
          depends="init"
          description="creates a jameleon launcher jar file."
          if="jameleon.core">
  
    <property name="ant.launcher.dir" value="${build.dir}/tmp"/>
    <property name="launcher.file" value="${dist.dir}/jameleon-launcher.jar"/>
    <delete file="${launcher.file}"/>
    <mkdir dir="${ant.launcher.dir}"/>
    <unjar src="${lib.dir}/ant/ant-launcher.jar" dest="${ant.launcher.dir}"/>
    <manifest file="MANIFEST.MF">
      <section name="common">
        <attribute name="Specification-Title" value="Jameleon"/>
        <attribute name="Specification-Version" value="0.1"/>
        <attribute name="Implementation-Title" value="Jameleon Launcher"/>
        <attribute name="Implementation-Version" value="0.1 ${TODAY}"/>
      </section>
      <attribute name="Main-Class" value="net.sf.jameleon.launch.JameleonLauncher"/>
    </manifest>
    <jar jarfile="${launcher.file}"
         basedir="${build.dir}"
         manifest="MANIFEST.MF"
         includes="net/sf/jameleon/launch/*.class"/>
    <jar jarfile="${launcher.file}"
         update="true"
         basedir="${ant.launcher.dir}"
         includes="**/Locator*.class"/>
    <delete file="MANIFEST.MF"/>
    <delete dir="${ant.launcher.dir}"/>
    <delete dir="${build.dir}/net/sf/jameleon/launch"/>
  </target>
  
  <target name="package.release.bin" description="creates a bin release" depends="main">
    <zip destfile="${ant.project.name}-${version}-bin.zip">
      <zipfileset dir="lib" prefix="${ant.project.name}-${version}-bin" filemode="755">
        <include name="**"/>
        <exclude name="ant/**"/>
      </zipfileset>
      <zipfileset dir="${dist.dir}" prefix="${ant.project.name}-${version}-bin" filemode="755">
        <include name="${ant.project.name}.jar"/>
      </zipfileset>
    </zip>
  </target>
  
  <target name="cleanAll" depends="clean"/>
  
  <target name="prepare" depends=""/>
  
  <target name="all" depends="junit, acceptance"/>
  
  <target name="compile" depends="build, copyRes"/>
  
  <target name="main" depends="compile, jar.launcher.files, init.taskdefs, register.functions, jar, gen.syntax.reference"/>
  
  <target name="junit" depends="prepare.tst, test"/>
  
  <target name="prepare.tst" depends="main, build.tst, register.functions.tst"/>
  
  <target name="quick.test" depends="prepare.tst, test"/>
</project>