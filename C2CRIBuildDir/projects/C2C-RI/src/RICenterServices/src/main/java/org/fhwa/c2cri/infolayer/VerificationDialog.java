/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VerificationDialog.java
 *
 * Created on Sep 27, 2011, 3:47:55 PM
 */
package org.fhwa.c2cri.infolayer;

import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumnModel;
import org.fhwa.c2cri.testmodel.testcasedata.TestCaseDataSource;


/**
 * The VerificationDialog presents a message to the user for verification.
 *
 * @author TransCore ITS, LLC
 * Last Updated:  1/8/2014
 */
public class VerificationDialog extends javax.swing.JDialog {

    /** The passed. */
    private boolean passed = false;
    
    /** The skip remaining user verifications. */
    private boolean skipRemainingUserVerifications = false;
    
    /** The specification. */
    private MessageSpecification specification;
    
    /** The user tc file. */
    private String userTCFile="";

    /**
     * Creates new form VerificationDialog.
     *
     * @param parent the parent
     * @param modal the modal
     */
    public VerificationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MessagePanel = new javax.swing.JPanel();
        messageTabbedPane = new javax.swing.JTabbedPane();
        messageSpecificationScrollPane = new javax.swing.JScrollPane();
        messageSpecificationTable = new javax.swing.JTable();
        rawMessageScrollPane = new javax.swing.JScrollPane();
        rawMessageTextArea = new javax.swing.JTextArea();
        ButtonPanel = new javax.swing.JPanel();
        passButton = new javax.swing.JButton();
        failButton = new javax.swing.JButton();
        skipCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        VerificationContextPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        verificationContextTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        createTestValuesButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        valueTestList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        noValidTestCaseLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("User Message Content Verification");
        setMinimumSize(new java.awt.Dimension(425, 325));

        MessagePanel.setMinimumSize(new java.awt.Dimension(150, 200));

        messageTabbedPane.setMinimumSize(new java.awt.Dimension(0, 0));
        messageTabbedPane.setName("MessageSpecification"); // NOI18N

        messageSpecificationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        messageSpecificationScrollPane.setViewportView(messageSpecificationTable);

        messageTabbedPane.addTab("Message Specification", messageSpecificationScrollPane);

        rawMessageTextArea.setColumns(20);
        rawMessageTextArea.setEditable(false);
        rawMessageTextArea.setRows(5);
        rawMessageScrollPane.setViewportView(rawMessageTextArea);

        messageTabbedPane.addTab("Raw Message", rawMessageScrollPane);

        passButton.setText("Pass");
        passButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passButtonActionPerformed(evt);
            }
        });

        failButton.setText("Fail");
        failButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                failButtonActionPerformed(evt);
            }
        });

        skipCheckBox.setText("Skip remaining user verification steps");

        jLabel1.setText("Click the button matching the results of the user's verification.");

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanel.setLayout(ButtonPanelLayout);
        ButtonPanelLayout.setHorizontalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(skipCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ButtonPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(passButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(failButton)))
                .addContainerGap(85, Short.MAX_VALUE))
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        ButtonPanelLayout.setVerticalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passButton)
                    .addComponent(failButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(skipCheckBox)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        verificationContextTextArea.setColumns(20);
        verificationContextTextArea.setEditable(false);
        verificationContextTextArea.setRows(3);
        jScrollPane1.setViewportView(verificationContextTextArea);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Verification Statement");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(101, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout VerificationContextPanelLayout = new javax.swing.GroupLayout(VerificationContextPanel);
        VerificationContextPanel.setLayout(VerificationContextPanelLayout);
        VerificationContextPanelLayout.setHorizontalGroup(
            VerificationContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VerificationContextPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
        );
        VerificationContextPanelLayout.setVerticalGroup(
            VerificationContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VerificationContextPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        createTestValuesButton.setText("Create");
        createTestValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTestValuesButtonActionPerformed(evt);
            }
        });

        valueTestList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Type 1" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        valueTestList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(valueTestList);

        jLabel3.setText("Type of Value Test to Create");

        jLabel4.setText("Create value tests from selected message values.");

        noValidTestCaseLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        noValidTestCaseLabel.setForeground(new java.awt.Color(255, 51, 51));
        noValidTestCaseLabel.setText("No valid User Test Case File Available");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(createTestValuesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(noValidTestCaseLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createTestValuesButton))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(noValidTestCaseLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout MessagePanelLayout = new javax.swing.GroupLayout(MessagePanel);
        MessagePanel.setLayout(MessagePanelLayout);
        MessagePanelLayout.setHorizontalGroup(
            MessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MessagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(messageTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addComponent(VerificationContextPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        MessagePanelLayout.setVerticalGroup(
            MessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MessagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VerificationContextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(messageTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MessagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MessagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Pass button action performed.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @param evt the evt
     */
    private void passButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passButtonActionPerformed
        passed = true;
        skipRemainingUserVerifications = skipCheckBox.isSelected();
        this.setVisible(false);
    }//GEN-LAST:event_passButtonActionPerformed

    /**
     * Fail button action performed.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @param evt the evt
     */
    private void failButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_failButtonActionPerformed
        passed = false;
        skipRemainingUserVerifications = skipCheckBox.isSelected();
        this.setVisible(false);
    }//GEN-LAST:event_failButtonActionPerformed

    /**
     * Creates the test values button action performed.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @param evt the evt
     */
    private void createTestValuesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTestValuesButtonActionPerformed
        String rows = "";
        ArrayList<MessageSpecificationItem> theList = new ArrayList<MessageSpecificationItem>();
        for (int ii : this.messageSpecificationTable.getSelectedRows()) {
            rows = rows.concat(ii + ", ");
            theList.add(this.specification.getMessageSpecItems().get(ii));
        }
        System.out.println("The selected rows = " + rows);

        try {
            ValueSpecificationItem testResult = MessageValueTester.getValueSpecItemFromMessageSpec(1, theList);
            System.out.println("Result " + testResult);
            TestCaseDataSource theTCSource = new TestCaseDataSource(userTCFile);
            String valueList = "";
            for (String thisItem : testResult.getValues()) {
                if (valueList.isEmpty()) {
                    valueList = valueList.concat(thisItem);
                } else {
                    valueList = valueList.concat("," + thisItem);
                }
            }

            theTCSource.setValueTestSpec(testResult.getValueName(), testResult.getTestType() + "," + testResult.getNumValues() + "," + valueList, 0);
            theTCSource.updateTCFile(userTCFile);
        } catch (Exception ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(null, "Exception: " + ex.getMessage()+ " User Test Case File = "+userTCFile, "CREATE VALUES TEST", javax.swing.JOptionPane.ERROR_MESSAGE);
//            System.out.println("Exception: " + ex.getMessage()+ " User Test Case File = "+userTCFile);
        }

    }//GEN-LAST:event_createTestValuesButtonActionPerformed

    /**
     * Checks if is passed.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @return true, if is passed
     */
    public boolean isPassed() {
        return passed;
    }

    /**
     * Checks if is skip remaining user verifications.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @return true, if is skip remaining user verifications
     */
    public boolean isSkipRemainingUserVerifications() {
        return skipRemainingUserVerifications;
    }

    /**
     * Sets the message specification.
     *
     * @param specification the new message specification
     */
    public void setMessageSpecification(MessageSpecification specification) {
        this.specification = specification;
        MessageSpecificationTableModel theModel = new MessageSpecificationTableModel(specification);
        this.messageSpecificationTable.setModel(theModel);
        SelectionListener listener = new SelectionListener(this.messageSpecificationTable, specification);
        this.messageSpecificationTable.getSelectionModel().addListSelectionListener(listener);
        TableColumnModel msTableModel = this.messageSpecificationTable.getColumnModel();
        msTableModel.getSelectionModel().addListSelectionListener(listener);
        ValueTextAreaRenderer textAreaRenderer = new ValueTextAreaRenderer(specification);
        msTableModel.getColumn(MessageSpecificationTableModel.ValueElementName_Col).setCellRenderer(textAreaRenderer);
        msTableModel.getColumn(MessageSpecificationTableModel.Value_Col).setCellRenderer(textAreaRenderer);
        this.messageSpecificationTable.setColumnSelectionAllowed(false);
        this.messageSpecificationTable.setCellSelectionEnabled(false);
        this.messageSpecificationTable.setRowSelectionAllowed(true);

    }

    /**
     * Sets the raw message.
     *
     * @param rawMessage the new raw message
     */
    public void setRawMessage(String rawMessage) {
        this.rawMessageTextArea.setText(rawMessage);
        this.rawMessageTextArea.setCaretPosition(0);
    }

    /**
     * Sets the verification instruction.
     *
     * @param instruction the new verification instruction
     */
    public void setVerificationInstruction(String instruction) {
        this.verificationContextTextArea.setText(instruction);
        this.verificationContextTextArea.setCaretPosition(0);
    }

    /**
     * Sets the user tc file.
     *
     * @param userTCFile the new user tc file
     */
    public void setUserTCFile(String userTCFile) {
        this.userTCFile = userTCFile;
        if ((this.userTCFile==null)||this.userTCFile.isEmpty()){
            this.createTestValuesButton.setEnabled(false);
        } else {
            File tmpFile = new File(this.userTCFile);
            if (tmpFile.exists()){
                this.createTestValuesButton.setEnabled(true);  
                this.noValidTestCaseLabel.setVisible(false);
            } else {
                this.createTestValuesButton.setEnabled(false);                                            
                this.noValidTestCaseLabel.setVisible(true);
            }
        }
    }



    /**
     * The main method.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                VerificationDialog dialog = new VerificationDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVerificationInstruction("This is the verification Instruction.");
                dialog.setRawMessage("This is the Raw Message");
//                dialog.setMessageSpecification("This is the Message Specification");
                dialog.setVisible(true);
                System.out.println("Test Result Was " + dialog.isPassed());
                System.out.println("The skip checkbox was set to " + dialog.isSkipRemainingUserVerifications());
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    /** The Button panel. */
    private javax.swing.JPanel ButtonPanel;
    
    /** The Message panel. */
    private javax.swing.JPanel MessagePanel;
    
    /** The Verification context panel. */
    private javax.swing.JPanel VerificationContextPanel;
    
    /** The create test values button. */
    private javax.swing.JButton createTestValuesButton;
    
    /** The fail button. */
    private javax.swing.JButton failButton;
    
    /** The j label1. */
    private javax.swing.JLabel jLabel1;
    
    /** The j label2. */
    private javax.swing.JLabel jLabel2;
    
    /** The j label3. */
    private javax.swing.JLabel jLabel3;
    
    /** The j label4. */
    private javax.swing.JLabel jLabel4;
    
    /** The j panel1. */
    private javax.swing.JPanel jPanel1;
    
    /** The j panel2. */
    private javax.swing.JPanel jPanel2;
    
    /** The j scroll pane1. */
    private javax.swing.JScrollPane jScrollPane1;
    
    /** The j scroll pane2. */
    private javax.swing.JScrollPane jScrollPane2;
    
    /** The message specification scroll pane. */
    private javax.swing.JScrollPane messageSpecificationScrollPane;
    
    /** The message specification table. */
    private javax.swing.JTable messageSpecificationTable;
    
    /** The message tabbed pane. */
    private javax.swing.JTabbedPane messageTabbedPane;
    
    /** The no valid test case label. */
    private javax.swing.JLabel noValidTestCaseLabel;
    
    /** The pass button. */
    private javax.swing.JButton passButton;
    
    /** The raw message scroll pane. */
    private javax.swing.JScrollPane rawMessageScrollPane;
    
    /** The raw message text area. */
    public javax.swing.JTextArea rawMessageTextArea;
    
    /** The skip check box. */
    private javax.swing.JCheckBox skipCheckBox;
    
    /** The value test list. */
    private javax.swing.JList valueTestList;
    
    /** The verification context text area. */
    public javax.swing.JTextArea verificationContextTextArea;
    // End of variables declaration//GEN-END:variables

    /**
     * The listener interface for receiving selection events.
     * The class that is interested in processing a selection
     * event implements this interface, and the object created
     * with that class is registered with a component using the
     * component's <code>addSelectionListener<code> method. When
     * the selection event occurs, that object's appropriate
     * method is invoked.
     *
     * @see SelectionEvent
     */
    class SelectionListener implements ListSelectionListener {

        /** The table. */
        JTable table;
        
        /** The specification. */
        MessageSpecification specification;

        // It is necessary to keep the table since it is not possible
        // to determine the table from the event's source
        /**
         * Instantiates a new selection listener.
         * 
         * Pre-Conditions: N/A
         * Post-Conditions: N/A
         *
         * @param table the table
         * @param specification the specification
         */
        SelectionListener(JTable table, MessageSpecification specification) {
            this.table = table;
            this.specification = specification;
        }

        /* (non-Javadoc)
         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
         */
        public void valueChanged(ListSelectionEvent e) {
            // If cell selection is enabled, both row and column change events are fired
            if (e.getSource() == table.getSelectionModel()
                    && table.getRowSelectionAllowed()) {
                // Column selection changed
                int first = e.getFirstIndex();
                int last = e.getLastIndex();
                int row = table.getSelectedRow();
                if (row >= 0) {
                    if (this.specification.getMessageSpecItems().get(row).isProjectOptional()) {
                        table.changeSelection(row, 0, true, false);
                    }
                }

            } else if (e.getSource() == table.getColumnModel().getSelectionModel()
                    && table.getColumnSelectionAllowed()) {
                // Row selection changed

                int first = e.getFirstIndex();
                int last = e.getLastIndex();

                int row = table.getSelectedRow();
                if (row >= 0) {
                    if (this.specification.getMessageSpecItems().get(row).isProjectOptional()) {
                        table.changeSelection(row, 0, true, false);
                    }
                }
            }

            if (e.getValueIsAdjusting()) {
                // The mouse button has not yet been released
            }
        }
    }
}
