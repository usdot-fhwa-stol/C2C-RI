/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.fhwa.c2cri.logger;

import java.nio.charset.Charset;
import org.apache.logging.log4j.ThreadContext;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.layout.AbstractStringLayout;
import org.apache.logging.log4j.core.util.Transform;


/**
 * The output of the XMLLayout consists of a series of log4j:event elements as
 * defined in the <a href="log4j.dtd">log4j.dtd </a>. It does not
 * output a complete well-formed XML file. The output is designed to be included
 * as an <em>external entity</em> in a separate file to form a correct XML
 * file.
 *
 * <p>
 * For example, if <code>abc</code> is the name of the file where the
 * XMLLayout ouput goes, then a well-formed XML file would be:
 *
 * <pre>
 *
 *  &lt;?xml version=&quot;1.0&quot; ?&gt;
 *
 *  &lt;!DOCTYPE log4j:eventSet SYSTEM &quot;log4j.dtd&quot; [&lt;!ENTITY data SYSTEM &quot;abc&quot;&gt;]&gt;
 *
 *  &lt;log4j:eventSet version=&quot;1.2&quot; xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;
 *    &amp;data
 *  &lt;/log4j:eventSet&gt;
 *
 * </pre>
 *
 * <p>
 * This approach enforces the independence of the XMLLayout and the appender
 * where it is embedded.
 *
 * <p>
 * The <code>version</code> attribute helps components to correctly intrepret
 * output generated by XMLLayout. The value of this attribute should be "1.1"
 * for output generated by log4j versions prior to log4j 1.2 (final release) and
 * "1.2" for relase 1.2 and later.
 *
 * Contributors:   Mathias Bogaert
 *
 * @author Ceki G&uuml;lc&uuml;
 * @since 0.9.0
 * 
 * Used to support logging for the C2C RI.
 */
public class RIXMLLayout extends AbstractStringLayout
{

    protected RIXMLLayout(Charset oCs)
	{
		super(oCs);
	}
	

	@Override
	public String toSerializable(LogEvent event)
	{
		StringBuilder buf = new StringBuilder();
        // We yield to the \r\n heresy.
        buf.append("<log4j:event logger=\"");
        buf.append(event.getLoggerName());
        buf.append("\" timestamp=\"");
        buf.append(Long.toString(event.getInstant().getEpochMillisecond()));
        buf.append("\" level=\"");
        buf.append(event.getLevel().toString());
        buf.append("\" thread=\"");
        buf.append(event.getThreadName());
        buf.append("\">\r\n");

        if (event.getMessage().getFormattedMessage().startsWith("<")) {
            buf.append("<log4j:message>\r\n");
            buf.append(event.getMessage().getFormattedMessage()).append("</log4j:message>\r\n");
        } else {
            buf.append("<log4j:message><![CDATA[");

            // Append the rendered message. Also make sure to escape any
            // existing CDATA sections.
            Transform.appendEscapingCData(buf, event.getMessage().getFormattedMessage());
            buf.append("]]></log4j:message>\r\n");

        }

        ThreadContext.ContextStack oCtxStack = event.getContextStack();

        if (oCtxStack != null && !oCtxStack.isEmpty()) {
            buf.append("<log4j:NDC><![CDATA[");
            buf.append(oCtxStack);
            buf.append("]]></log4j:NDC>\r\n");
        }


		Throwable oThrow = event.getThrown();
		if (oThrow != null)
		{
			StackTraceElement[] oSTE = event.getThrown().getStackTrace();

			if (oSTE!= null) {

				buf.append("<log4j:throwable><![CDATA[");

				for (int i = 0; i < oSTE.length; i++) {
					buf.append(oSTE[i].toString()).append("\r\n");
				}

				buf.append("]]></log4j:throwable>\r\n");
			}
		}


        if (event.isIncludeLocation()) {
			StackTraceElement oSTE = event.getSource();
            buf.append("<log4j:locationInfo class=\"");
            buf.append(Transform.escapeHtmlTags(oSTE.getClassName()));
            buf.append("\" method=\"");
            buf.append(Transform.escapeHtmlTags(oSTE.getMethodName()));
            buf.append("\" file=\"");
            buf.append(oSTE.getFileName());
            buf.append("\" line=\"");
            buf.append(oSTE.getLineNumber());
            buf.append("\"/>\r\n");
        }

        buf.append("</log4j:event>\r\n\r\n");
        
        return buf.toString();
	}
}
