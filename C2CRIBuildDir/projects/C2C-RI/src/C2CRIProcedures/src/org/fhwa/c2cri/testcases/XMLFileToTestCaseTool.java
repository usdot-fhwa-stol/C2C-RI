/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.fhwa.c2cri.testcases;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.fhwa.c2cri.gui.testmodel.testcasedata.editor.Group;
import org.fhwa.c2cri.gui.testmodel.testcasedata.editor.Parameter;
import org.fhwa.c2cri.infolayer.MessageSpecification;
import org.fhwa.c2cri.ntcip2306v109.messaging.MessageSpecificationProcessor;
import org.fhwa.c2cri.testmodel.testcasedata.TestCaseDataParser;
import org.fhwa.c2cri.testmodel.testcasedata.TestCaseDataSource;
import org.fhwa.c2cri.testmodel.testcasedata.TestCaseFile;
import org.fhwa.c2cri.testprocedures.MessageDetailDesignElement;
import org.fhwa.c2cri.testprocedures.MessageDetailDesignMatcher;

/**
 *
 * @author TransCore ITS, LLC
 */
public class XMLFileToTestCaseTool extends javax.swing.JFrame {

    boolean c2CCheckBoxSelected = false;
    File defaultInputDataDirectory = new File("C:\\projects\\C2C-RI\\C2CRIBuildDir\\projects\\C2C-RI\\src\\RIGUI\\CustomTestSuites\\TMDDV301ExtensionToBlankTestSuite\\InfoLayer\\Data");
    File defaultOutputDataDirectory = new File("C:\\TestCases");
    File defaultXMLSampleDirectory = new File("C:\\XMLSample");
    TestCaseFile inputTestCaseFile = null;

    /**
     * Creates new form XMLFileToTestCaseTool
     */
    public XMLFileToTestCaseTool() {
        initComponents();
        jC2CHeaderCheckBox.setSelected(c2CCheckBoxSelected);
        jC2CHeaderFileButton.setEnabled(c2CCheckBoxSelected);
        jC2CHeaderFileTextField.setEnabled(c2CCheckBoxSelected);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jDataFileTextField = new javax.swing.JTextField();
        jInputFileButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jXMLFileTextField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jIterationComboBox = new javax.swing.JComboBox();
        jMessageComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jDestinationDataFileTextField = new javax.swing.JTextField();
        jDestinationFileButton = new javax.swing.JButton();
        jC2CHeaderCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jC2CHeaderFileTextField = new javax.swing.JTextField();
        jC2CHeaderFileButton = new javax.swing.JButton();

        fileChooser.setDialogTitle("Select XML File");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Input Data File:");

        jDataFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDataFileTextFieldActionPerformed(evt);
            }
        });

        jInputFileButton.setText("...");
        jInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInputFileButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("XML File:");

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Process");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setText("Iteration");

        jLabel4.setText("Message");

        jIterationComboBox.setModel(new IterationModel());

        jMessageComboBox.setModel(new MessageModel());

        jLabel5.setText("Destination Data File:");

        jDestinationFileButton.setText("...");
        jDestinationFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDestinationFileButtonActionPerformed(evt);
            }
        });

        jC2CHeaderCheckBox.setText("C2C Header");
        jC2CHeaderCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jC2CHeaderCheckBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("C2C Header XML File:");

        jC2CHeaderFileButton.setText("...");
        jC2CHeaderFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jC2CHeaderFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jIterationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jMessageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jButton3)
                        .addGap(75, 75, 75)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jC2CHeaderFileTextField))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDestinationDataFileTextField))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDataFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jInputFileButton)
                            .addComponent(jDestinationFileButton)
                            .addComponent(jC2CHeaderFileButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jXMLFileTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(jC2CHeaderCheckBox))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jDataFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jInputFileButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jIterationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMessageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jDestinationDataFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDestinationFileButton))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jXMLFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jC2CHeaderCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jC2CHeaderFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jC2CHeaderFileButton))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInputFileButtonActionPerformed
        fileChooser.setCurrentDirectory(defaultInputDataDirectory);
        fileChooser.setDialogTitle("Select Input Data File");
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                jDataFileTextField.setText(file.getAbsolutePath());

                TestCaseFile baseTCFile = new TestCaseFile(file.getAbsolutePath());

                baseTCFile.init();

                System.out.println("Parsing " + file.getAbsolutePath() + " ...");
                int n = TestCaseDataParser.parsePropertyFile(baseTCFile);

                if (n > 0) {
                    inputTestCaseFile = baseTCFile;
                } else {
                    inputTestCaseFile = null;
                }
                IterationModel theModel = (IterationModel) jIterationComboBox.getModel();
                theModel.updateModelTestFile();
                MessageModel msgModel = (MessageModel) jMessageComboBox.getModel();
                msgModel.updateModelTestFile();

                defaultInputDataDirectory = fileChooser.getCurrentDirectory();
            } catch (Exception ex) {
                System.out.println("problem retrieving the file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jInputFileButtonActionPerformed

    private void jDataFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDataFileTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jDataFileTextFieldActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedIteration = -1;
        String selectedMessage = "";

        IterationModel theModel = (IterationModel) jIterationComboBox.getModel();
        selectedIteration = (int) theModel.getSelectedItem();
        MessageModel msgModel = (MessageModel) jMessageComboBox.getModel();
        selectedMessage = (String) msgModel.getSelectedItem();

        processMessageSpec(jDataFileTextField.getText(), jDestinationDataFileTextField.getText(),
                jXMLFileTextField.getText(), selectedIteration,
                selectedMessage,
                c2CCheckBoxSelected,
                jC2CHeaderFileTextField.getText());

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        fileChooser.setDialogTitle("Select Input XML File");
        fileChooser.setCurrentDirectory(defaultXMLSampleDirectory);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                jXMLFileTextField.setText(file.getAbsolutePath());
                defaultXMLSampleDirectory = fileChooser.getCurrentDirectory();
            } catch (Exception ex) {
                System.out.println("problem retrieving the file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jC2CHeaderFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC2CHeaderFileButtonActionPerformed
        fileChooser.setDialogTitle("Select C2C Header XML File");
        fileChooser.setCurrentDirectory(defaultXMLSampleDirectory);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                jC2CHeaderFileTextField.setText(file.getAbsolutePath());
                defaultXMLSampleDirectory = fileChooser.getCurrentDirectory();
            } catch (Exception ex) {
                System.out.println("problem retrieving the file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jC2CHeaderFileButtonActionPerformed

    private void jDestinationFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDestinationFileButtonActionPerformed
        fileChooser.setDialogTitle("Select Output Data File");
        fileChooser.setCurrentDirectory(defaultOutputDataDirectory);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                jDestinationDataFileTextField.setText(file.getAbsolutePath());
                defaultOutputDataDirectory = fileChooser.getCurrentDirectory();
            } catch (Exception ex) {
                System.out.println("problem retrieving the file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jDestinationFileButtonActionPerformed

    private void jC2CHeaderCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC2CHeaderCheckBoxActionPerformed
        c2CCheckBoxSelected = !c2CCheckBoxSelected;
        jC2CHeaderFileButton.setEnabled(c2CCheckBoxSelected);
        jC2CHeaderFileTextField.setEnabled(c2CCheckBoxSelected);
    }//GEN-LAST:event_jC2CHeaderCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XMLFileToTestCaseTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XMLFileToTestCaseTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XMLFileToTestCaseTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XMLFileToTestCaseTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XMLFileToTestCaseTool().setVisible(true);
            }
        });
    }

    private void processMessageSpec(String inputDataFile, String outputDataFile,
            String inputXMLFile, int iterationIndex,
            String messageGroup,
            boolean c2cHeaderFlag,
            String c2cHeaderXMLFile) {

        MessageSpecificationProcessor newProcessor = new MessageSpecificationProcessor();

        MessageSpecification responseSpecification = null;
        ArrayList<Parameter> parameterList = new ArrayList<>();


        try {
            if (c2cHeaderFlag) {
                responseSpecification = newProcessor.convertXMLtoMessageSpecification(toByteArray(new File(c2cHeaderXMLFile)));

                HashMap<String, MessageDetailDesignMatcher> msgDetailMap = new HashMap<String, MessageDetailDesignMatcher>();
                MessageDetailDesignMatcher msgMatch = null;
                String messageOut = "";
                String type = "#PARAMETER TYPE = String\n";
                String editable = "#EDITABLE = true\n";

                //                               MessageDetailDesignMatcher msgMatch = new MessageDetailDesignMatcher(String messageName);
                for (String parameterEntry : responseSpecification.getMessageSpec()) {
//                messageOut = messageOut.concat(type);
//                messageOut = messageOut.concat(editable);

                    String message = "";
                    String parameter = "";
                    String elementValue = "";
                    if (parameterEntry.contains(".")) {
                        message = parameterEntry.substring(parameterEntry.indexOf(":") + 1, parameterEntry.indexOf("."));
                        String specPart = parameterEntry.substring(0, parameterEntry.indexOf("="));
                        parameter = specPart.substring(specPart.lastIndexOf(".") + 1).trim();
                        elementValue = parameterEntry.substring(parameterEntry.indexOf("=") + 1, parameterEntry.length());
                    } else {
                        parameter = parameterEntry.substring(0, parameterEntry.indexOf("=")).trim();
                        message = parameterEntry.substring(parameterEntry.indexOf(":") + 1, parameterEntry.indexOf("=")).trim();
                        elementValue = parameterEntry.substring(parameterEntry.indexOf("=") + 1, parameterEntry.length());
                    }

                    if (msgDetailMap.containsKey(message)) {
                        msgMatch = msgDetailMap.get(message);
                    } else {
                        msgMatch = new MessageDetailDesignMatcher(message);
                        msgDetailMap.put(message, msgMatch);
                    }

                    String documentationString = "";
                    if (msgMatch.getMatchesForElementName(parameter).size() > 0) {
                        MessageDetailDesignElement theElement = msgMatch.getMatchesForElementName(parameter).get(0);
                        documentationString = parameterEntry.substring(0, parameterEntry.indexOf("=")) + " BaseType=" + theElement.getBaseType() + "  ParentType= " + theElement.getParentType();
                    } else {
                        documentationString = parameterEntry.substring(0, parameterEntry.indexOf("="));
                    }

                    messageOut = messageOut.concat("#DOCUMENTATION = " + documentationString + "\n");
                    messageOut = messageOut.concat(parameterEntry + "\n\n");
                    Parameter msgParameter = new Parameter(parameter, elementValue, true, documentationString, "String");
                    parameterList.add(msgParameter);
                }

            }
            responseSpecification = newProcessor.convertXMLtoMessageSpecification(toByteArray(new File(inputXMLFile)));

            HashMap<String, MessageDetailDesignMatcher> msgDetailMap = new HashMap<String, MessageDetailDesignMatcher>();
            MessageDetailDesignMatcher msgMatch = null;
            String messageOut = "";
            String type = "#PARAMETER TYPE = String\n";
            String editable = "#EDITABLE = true\n";

            //                               MessageDetailDesignMatcher msgMatch = new MessageDetailDesignMatcher(String messageName);
            for (String parameterEntry : responseSpecification.getMessageSpec()) {
//                messageOut = messageOut.concat(type);
//                messageOut = messageOut.concat(editable);

                String message = "";
                String parameter = "";
                String elementValue = "";
                if (parameterEntry.contains(".")) {
                    message = parameterEntry.substring(parameterEntry.indexOf(":") + 1, parameterEntry.indexOf("."));
                    String specPart = parameterEntry.substring(0, parameterEntry.indexOf("="));
                    parameter = specPart.substring(specPart.lastIndexOf(".") + 1).trim();
                    elementValue = parameterEntry.substring(parameterEntry.indexOf("=") + 1, parameterEntry.length());
                } else {
                    parameter = parameterEntry.substring(0, parameterEntry.indexOf("=")).trim();
                    message = parameterEntry.substring(parameterEntry.indexOf(":") + 1, parameterEntry.indexOf("=")).trim();
                    elementValue = parameterEntry.substring(parameterEntry.indexOf("=") + 1, parameterEntry.length());
                }

                if (msgDetailMap.containsKey(message)) {
                    msgMatch = msgDetailMap.get(message);
                } else {
                    msgMatch = new MessageDetailDesignMatcher(message);
                    msgDetailMap.put(message, msgMatch);
                }

                String documentationString = "";
                if (msgMatch.getMatchesForElementName(parameter).size() > 0) {
                    MessageDetailDesignElement theElement = msgMatch.getMatchesForElementName(parameter).get(0);
                    documentationString = parameterEntry.substring(0, parameterEntry.indexOf("=")) + " BaseType=" + theElement.getBaseType() + "  ParentType= " + theElement.getParentType();
                } else {
                    documentationString = parameterEntry.substring(0, parameterEntry.indexOf("="));
                }

                messageOut = messageOut.concat("#DOCUMENTATION = " + documentationString + "\n");
                messageOut = messageOut.concat(parameterEntry + "\n\n");
                Parameter msgParameter = new Parameter(parameterEntry.substring(0, parameterEntry.indexOf("=")), elementValue, true, documentationString, "String");
                parameterList.add(msgParameter);
            }


            System.out.println(messageOut);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {
            TestCaseFile baseTCFile = new TestCaseFile(inputDataFile);

            baseTCFile.init();

            System.out.println("Parsing " + inputDataFile + " ...");
            int n = TestCaseDataParser.parsePropertyFile(baseTCFile);

            if (n > 0) {

                //               for (int ll = 0; ll < baseTCFile.numIteration(); ll++) {
                    boolean groupFound = false;
                for (int jj = 0; jj < baseTCFile.iterationAt(iterationIndex).numGroups(); jj++) {
//                        for (int kk = 0; kk < baseTCFile.iterationAt(iterationIndex).groupAt(jj).numParameters(); kk++) {
//                            if (jj == 0) {
//                                Parameter theParameter = baseTCFile.iterationAt(iterationIndex).groupAt(jj).parameterAt(kk);
////                                    System.out.println("Parsed:" + baseStandard + ", " + dataFiles[ii].getName() + ", " + ll + ", " + theParameter.getName() + ", " + theParameter.getDoc() + ", " + theParameter.getType() + ", " + theParameter.isEditable());
//                                if (theParameter.getValue().contains(TestCaseDataSource.MESSAGESPECVALUE)) {
//                                    System.out.println("The Parameter Value for MESSAGESPECVALUE = " + theParameter.getValue());
//                                } else if (theParameter.getValue().contains(TestCaseDataSource.VALUESPECVALUE)) {
//                                    System.out.println("The Parameter Value for VALUESPECVALUE = " + theParameter.getValue());
//                                }
                    if (baseTCFile.iterationAt(iterationIndex).groupAt(jj).getName().equals(messageGroup)) {
                        groupFound = true;
                        System.out.println("The Test Case File contains " + baseTCFile.iterationAt(iterationIndex).groupAt(jj).numParameters()
                                + " parameters for message group " + messageGroup + " before getting cleared.");
                        baseTCFile.iterationAt(iterationIndex).groupAt(jj).removeParameters();
                        for (Parameter thisParameter : parameterList) {
                            baseTCFile.iterationAt(iterationIndex).groupAt(jj).addParameter(thisParameter);
                        }
                        System.out.println("The Test Case File contains " + baseTCFile.iterationAt(iterationIndex).groupAt(jj).numParameters()
                                + " parameters for message group " + messageGroup + " after importing the message spec.");
                    }
//                        }
                }
                if (!groupFound){
                        Group newGroup = new Group(messageGroup);
                        for (Parameter thisParameter : parameterList) {
                            newGroup.addParameter(thisParameter);
                        }
                        baseTCFile.iterationAt(iterationIndex).addGroup(newGroup);
                    
                }
                inputTestCaseFile = baseTCFile;
                updateTCFile(outputDataFile);
            }
            //           }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    public void updateTCFile(String fileName) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName)))
		{
            String newLine = System.getProperty("line.separator");
            for (int ii = 0; ii < inputTestCaseFile.numIteration(); ii++) {
                bw.write(inputTestCaseFile.iterationAt(ii).toText() + newLine);
            }
            inputTestCaseFile.setModified(false);
        } catch (Exception e) {
            //System.out.println("Error when saving");
            JOptionPane.showMessageDialog(null,
                    "Could not save Data File:\n" + inputTestCaseFile.getAbsolutePath(),
                    "Error in Saving Value Verification Data",
                    JOptionPane.ERROR_MESSAGE);
        }

    }

    private byte[] toByteArray(File file) throws FileNotFoundException, IOException {
        int length = (int) file.length();
        byte[] array = new byte[length];
        try (InputStream in = new FileInputStream(file))
		{
			int offset = 0;
			while (offset < length) {
				offset += in.read(array, offset, (length - offset));
			}
		}
        return array;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jC2CHeaderCheckBox;
    private javax.swing.JButton jC2CHeaderFileButton;
    private javax.swing.JTextField jC2CHeaderFileTextField;
    private javax.swing.JTextField jDataFileTextField;
    private javax.swing.JTextField jDestinationDataFileTextField;
    private javax.swing.JButton jDestinationFileButton;
    private javax.swing.JButton jInputFileButton;
    private javax.swing.JComboBox jIterationComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox jMessageComboBox;
    private javax.swing.JTextField jXMLFileTextField;
    // End of variables declaration//GEN-END:variables

    class IterationModel extends AbstractListModel implements ComboBoxModel {

        int[] iterationList = null;
        int selection = -1;

        public void updateModelTestFile() {
            if (inputTestCaseFile != null) {
                iterationList = new int[inputTestCaseFile.numIteration()];
                for (int ii = 0; ii < iterationList.length; ii++) {
                    iterationList[ii] = ii;
                }
                IterationModel.this.fireContentsChanged(IterationModel.this, 0, iterationList.length);

            } else {
                IterationModel.this.fireContentsChanged(IterationModel.this, 0, 0);
            }
        }

        @Override
        public void setSelectedItem(Object anItem) {
            selection = (int) anItem;
        }

        @Override
        public Object getSelectedItem() {
            return selection;
        }

        @Override
        public int getSize() {
            if (iterationList != null) {
                return iterationList.length; //To change body of generated methods, choose Tools | Templates.
            } else {
                return 0;
            }

        }

        @Override
        public Object getElementAt(int index) {
            return iterationList[index]; //To change body of generated methods, choose Tools | Templates.
        }
    }

    class MessageModel extends AbstractListModel implements ComboBoxModel {

        String[] messageList = null;
        String selection = "";
        int selectedIteration = 0;
        HashMap<String, Integer> messageMap = new HashMap<>();

        public void updateModelTestFile() {
            messageMap.clear();
            if (inputTestCaseFile != null) {

                for (int jj = 0; jj < inputTestCaseFile.iterationAt(selectedIteration).numGroups(); jj++) {
                    for (int kk = 0; kk < inputTestCaseFile.iterationAt(selectedIteration).groupAt(jj).numParameters(); kk++) {
                        if (jj == 0) {
                            Parameter theParameter = inputTestCaseFile.iterationAt(selectedIteration).groupAt(jj).parameterAt(kk);
                            if (theParameter.getValue().contains(TestCaseDataSource.MESSAGESPECVALUE)) {
                                System.out.println("The Parameter Value for MESSAGESPECVALUE = " + theParameter.getValue());
                                messageMap.put(theParameter.getValue().replace(TestCaseDataSource.MESSAGESPECVALUE, ""), kk);
                            }
                        }
                    }
                }
                messageList = messageMap.keySet().toArray(new String[0]);
                MessageModel.this.fireContentsChanged(MessageModel.this, 0, messageMap.size());

            } else {
                MessageModel.this.fireContentsChanged(MessageModel.this, 0, 0);
            }
        }

        @Override
        public void setSelectedItem(Object anItem) {
            selection = (String) anItem;
        }

        @Override
        public Object getSelectedItem() {
            return selection;
        }

        @Override
        public int getSize() {
            return messageMap.size(); //To change body of generated methods, choose Tools | Templates.


        }

        @Override
        public Object getElementAt(int index) {
            if (messageList == null) {
                return "";
            }
            return messageList[index]; //To change body of generated methods, choose Tools | Templates.
        }
    }
}
