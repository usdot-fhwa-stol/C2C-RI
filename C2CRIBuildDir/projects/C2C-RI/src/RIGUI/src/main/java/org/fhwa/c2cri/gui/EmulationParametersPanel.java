/*
 * EmulationParametersPanel.java - Contains the Emulation Parameters Panel class which extends javax.swing.JPanel.
 *
 * Created on Feb 12, 2010, 7:44:02 PM
 */
package org.fhwa.c2cri.gui;

import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * The panel used by the user to specify Emulation parameters to be used for a test.
 * 
 * This class provides the view of the panel only.  Control of the panel is handled by an external
 * coordinator (control) class.
 *
 * @author TransCore ITS, LLC
 * Last Updated:  1/8/2014
 */
public class EmulationParametersPanel extends javax.swing.JPanel 
{
    //The "UpdateButtonPressed" variable is used to set the command action for the "Update" button.
    public static final String UpdateButtonPressed = "UpdateButtonPressed";
    //The "ViewButtonPressed" variable is used to set the command action for the "View" button.
    public static final String ViewButtonPressed = "ViewButtonPressed";

    /** 
     * Creates new form InfoLayerPanel by calling initComponents.
     */
    public EmulationParametersPanel() {
        initComponents();
        this.emulationParametersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
           public void valueChanged(ListSelectionEvent event) {
               if (emulationParametersTable.getSelectedRow()> -1){
                   ViewButton.setEnabled(true);
                   UpdateButton.setEnabled(true);
               } else {
                   ViewButton.setEnabled(false);
                   UpdateButton.setEnabled(false);                   
               }
           }
        });
    }

    public JTable getEmulationParametersTable() {
        return emulationParametersTable;
    }

    public JTextField getCommandQueueLengthTextField() {
        return CommandQueueLengthTextField;
    }

    public void setCommandQueueLengthTextField(String CommandQueueLengthTextField) {
        this.CommandQueueLengthTextField.setText(CommandQueueLengthTextField);
    }

    public JButton getUpdateButton() {
        return UpdateButton;
    }

    public JButton getViewButton() {
        return ViewButton;
    }

    
    /** This method is called from within the constructor to
     * initialize the panel.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emulationParametersPanel = new javax.swing.JPanel();
        selectEmulationParameterScrollPane = new javax.swing.JScrollPane();
        emulationParametersTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        CommandQueueLengthTextField = new javax.swing.JTextField();
        ViewButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        CommandQueueLengthLabel = new javax.swing.JLabel();

        emulationParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Entity Emulation Selections"));

        selectEmulationParameterScrollPane.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        selectEmulationParameterScrollPane.setAutoscrolls(true);
        selectEmulationParameterScrollPane.setPreferredSize(new java.awt.Dimension(650, 72));

        emulationParametersTable.setAutoCreateRowSorter(true);
        emulationParametersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"2.3.1.1.1", "Need for Subscription Request"},
                {"2.3.1.1.2", "Need to communicate DMS Inventory"},
                {"2.3.1.1.3", "Need to provide CCTV Control"},
                {"2.3.1.1.4", "Need to process FE Update"},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Entity Source Type", "Source"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        emulationParametersTable.setToolTipText("The set of Entity Source Types and Entity Sources.");
        emulationParametersTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        emulationParametersTable.setFillsViewportHeight(true);
        emulationParametersTable.setOpaque(false);
        emulationParametersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        selectEmulationParameterScrollPane.setViewportView(emulationParametersTable);
        if (emulationParametersTable.getColumnModel().getColumnCount() > 0) {
            emulationParametersTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        }
        emulationParametersTable.getAccessibleContext().setAccessibleName("Available Emulation Parameter Settings");
        emulationParametersTable.getAccessibleContext().setAccessibleDescription("The set of Entity Source Types and Entity Sources.");

        CommandQueueLengthTextField.setText("   ");
        CommandQueueLengthTextField.setMinimumSize(new java.awt.Dimension(69, 22));

        ViewButton.setText("View");
        ViewButton.setToolTipText("Emulation Selection View Button");
        ViewButton.setEnabled(false);

        UpdateButton.setText("Update");
        UpdateButton.setToolTipText("Emulation Selection Update Button");
        UpdateButton.setEnabled(false);

        CommandQueueLengthLabel.setText("Command Queue Length");
        CommandQueueLengthLabel.setToolTipText("Command Queue Length");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(UpdateButton)
                        .addGap(18, 18, 18)
                        .addComponent(ViewButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CommandQueueLengthLabel)
                        .addGap(18, 18, 18)
                        .addComponent(CommandQueueLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewButton)
                    .addComponent(UpdateButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CommandQueueLengthLabel)
                    .addComponent(CommandQueueLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout emulationParametersPanelLayout = new javax.swing.GroupLayout(emulationParametersPanel);
        emulationParametersPanel.setLayout(emulationParametersPanelLayout);
        emulationParametersPanelLayout.setHorizontalGroup(
            emulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emulationParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(emulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectEmulationParameterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        emulationParametersPanelLayout.setVerticalGroup(
            emulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emulationParametersPanelLayout.createSequentialGroup()
                .addComponent(selectEmulationParameterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(emulationParametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(emulationParametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        emulationParametersPanel.getAccessibleContext().setAccessibleName("Emulation Parameter Selections");
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CommandQueueLengthLabel;
    protected javax.swing.JTextField CommandQueueLengthTextField;
    protected javax.swing.JButton UpdateButton;
    protected javax.swing.JButton ViewButton;
    private javax.swing.JPanel emulationParametersPanel;
    protected javax.swing.JTable emulationParametersTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane selectEmulationParameterScrollPane;
    // End of variables declaration//GEN-END:variables
}
