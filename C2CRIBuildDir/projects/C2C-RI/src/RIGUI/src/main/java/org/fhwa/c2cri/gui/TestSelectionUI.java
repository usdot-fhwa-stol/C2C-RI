
/*
 * TestSelectionUI.java - Contains the class definition for teh TestSelectionUI Dialog class.
 *
 * Created on Mar 15, 2010, 12:14:12 AM
 */
package org.fhwa.c2cri.gui;

import java.io.File;
import javax.swing.JOptionPane;
import org.fhwa.c2cri.utilities.FilenameValidator;
import org.fhwa.c2cri.utilities.Parameter;
import org.fhwa.c2cri.utilities.RIParameters;

/**
 * The TestSelectionUI Dialog is used to specify a new test.  It provides the user
 * the ability to specify the name for the test, a description and the test configuration
 * file to be used for the test.  It extends the javax.swing.JDialog Class.
 *
 * @author TransCore ITS, LLC
 * Last Updated:  1/8/2014
 */
public class TestSelectionUI extends javax.swing.JDialog {

    /**
     * The name that the user specifies for a test.
     */
    private String testName;
    /**
     * The description that the user specifies for a test.
     */
    private String testDescription;
    /**
     * The name of the configuration file that the user specifies for a test.
     */
    private String testConfiguration;
    /**
     * The path to the configuration file that the user specifies for a test.
     */
    private String testConfigurationPath;
    /**
     * Flag used to indicate that the dialog was closed due to the user pressing the ok button.
     */
    private boolean okPressed;
    
    /** The selected file. */
    private File selectedFile;

    /** Indicates whether emulation should be used during the test. */
    private boolean emulationEnabled;

    /** Indicates whether emulation should be re-initialized between each test case. */
    private boolean emulationReinitialzeEnabled;
    
    /** The parent frame. */
    private javax.swing.JFrame parentFrame;

    /** Creates new window TestSelectionUI.  It first calls the constructor for the java.awt.Frame class
     * setting its modal parameter.  Then it calls initComponents to place the screen components on the display and
     * to establish the listeners.  Events are handled local to this class.
     *
     * @param parent - the parent frame that this dialog is associated with
     * @param modal - flag indicating whether the dialog will be modal or not.
     */
    public TestSelectionUI(javax.swing.JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        parentFrame = parent;
        BasicGUIActionWrapper initTestSelectionAction = new BasicGUIActionWrapper(parent, "Initializing the TestSelection UI") {

            ConfigFileTableModel model;

            @Override
            protected Boolean actionMethod() throws Exception {
                testSelectionConfigFileTable.setVisible(false);
                File dir = new File(RIParameters.getInstance().getParameterValue(Parameter.config_file_path));
                model = new ConfigFileTableModel(dir);
                configPathTextField.setText(dir.getAbsolutePath());

                // Store the path for restoring in case the user types in an invalid path
                testConfigurationPath = configPathTextField.getText();

                return true;
            }

            @Override
            protected void wrapUp(Boolean result) {
                testSelectionConfigFileTable.setModel(model);
                TextAreaRenderer textAreaRenderer = new TextAreaRenderer();
                textAreaRenderer.setLineWrap(true);
                testSelectionConfigFileTable.getColumn("Name").setCellRenderer(textAreaRenderer);
                testSelectionConfigFileTable.getColumn("Description").setCellRenderer(textAreaRenderer);
                testSelectionConfigFileTable.getColumn("Last Modified").setCellRenderer(new DateRenderer());
//                testSelectionConfigFileTable.setPreferredSize(testSelectionConfigFileTable.getSize());
                model.fireTableDataChanged();
                testSelectionConfigFileTable.setVisible(true);
                testSelectionConfigFileTable.repaint();
                if (!result) {
                    javax.swing.JOptionPane.showMessageDialog(null, "An error was encountered trying to complete the Initialize TestSelection UI action.");
                }
            }
        };
        initTestSelectionAction.execute();

// Removed for Release 2       FilenameInputVerifier theVerifier = new FilenameInputVerifier();
// Removed for Release 2        this.testNameTextField.setInputVerifier(theVerifier);
    }

    /** This method is called from within the constructor to
     * initialize the dialog window.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testNotesScrollPane = new javax.swing.JScrollPane();
        testNotesTextArea = new javax.swing.JTextArea();
        testNameTextField = new javax.swing.JTextField();
        pathButton = new javax.swing.JButton();
        testConfigurationLabel = new javax.swing.JLabel();
        testNotesLabel = new javax.swing.JLabel();
        acceptButton = new javax.swing.JButton();
        testNameLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        testSelectionScrollPane = new javax.swing.JScrollPane();
        testSelectionConfigFileTable = new javax.swing.JTable();
        configPathTextField = new javax.swing.JTextField();
        testNotesLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jEnableEmulationCheckBox = new javax.swing.JCheckBox();
        jReinitializeEmulationCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RI Test Definition");
        setResizable(false);

        testNotesTextArea.setColumns(20);
        testNotesTextArea.setRows(3);
        testNotesTextArea.setToolTipText("Description for this test.");
        testNotesTextArea.setWrapStyleWord(true);
        testNotesTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        testNotesScrollPane.setViewportView(testNotesTextArea);

        testNameTextField.setToolTipText("The name assigned to this test.");

        pathButton.setText("Path...");
        pathButton.setToolTipText("Select the path to find Test Configuration Files.");
        pathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathButtonActionPerformed(evt);
            }
        });

        testConfigurationLabel.setText("Test Configuration");

        testNotesLabel.setText("Test Notes");

        acceptButton.setText("Accept");
        acceptButton.setToolTipText("Accept the Test Information and initialize the test.");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        testNameLabel.setText("Test Name");

        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Cancel the test.");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        testSelectionScrollPane.setAutoscrolls(true);
        testSelectionScrollPane.setName(""); // NOI18N
        testSelectionScrollPane.setPreferredSize(new java.awt.Dimension(0, 0));

        testSelectionConfigFileTable.setAutoCreateRowSorter(true);
        testSelectionConfigFileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Description", "Date Modified"
            }
        ));
        testSelectionConfigFileTable.setToolTipText("Select a Test Configuration file.");
        testSelectionConfigFileTable.setFillsViewportHeight(true);
        testSelectionConfigFileTable.setMaximumSize(new java.awt.Dimension(2147483647, 2567));
        testSelectionConfigFileTable.setMinimumSize(new java.awt.Dimension(45, 100));
        testSelectionConfigFileTable.setName(""); // NOI18N
        testSelectionConfigFileTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        testSelectionConfigFileTable.getTableHeader().setReorderingAllowed(false);
        testSelectionScrollPane.setViewportView(testSelectionConfigFileTable);
        testSelectionConfigFileTable.getAccessibleContext().setAccessibleName("Test Configuration File Table");

        configPathTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        configPathTextField.setToolTipText("The path of the configuration file.");
        configPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configPathTextFieldActionPerformed(evt);
            }
        });
        configPathTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                configPathTextFieldFocusLost(evt);
            }
        });

        testNotesLabel1.setText("Path");

        jEnableEmulationCheckBox.setText("Enable Emulation (Owner Center Mode Only)");
        jEnableEmulationCheckBox.setToolTipText("Enable the emulation of devices during testing.");
        jEnableEmulationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEnableEmulationCheckBoxActionPerformed(evt);
            }
        });

        jReinitializeEmulationCheckBox.setText("Re-Initialize Emulation before each Test Case");
        jReinitializeEmulationCheckBox.setToolTipText("Re-initialize emulation information before the start of each test case.");
        jReinitializeEmulationCheckBox.setEnabled(false);
        jReinitializeEmulationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReinitializeEmulationCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jReinitializeEmulationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jEnableEmulationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4)))
                .addGap(133, 133, 133))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jEnableEmulationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jReinitializeEmulationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(testNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testSelectionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(testNotesLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(configPathTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pathButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(testNotesScrollPane))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(acceptButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addGap(163, 163, 163))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(testConfigurationLabel)
                                    .addComponent(testNotesLabel))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testNameLabel)
                .addGap(5, 5, 5)
                .addComponent(testNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(testNotesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testNotesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(testConfigurationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pathButton)
                    .addComponent(testNotesLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testSelectionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(acceptButton))
                .addGap(56, 56, 56))
        );

        configPathTextField.getAccessibleContext().setAccessibleName("Configuration File Path");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The user has requested that the test be run with the specified parameters.  Then notify the C2CMainUI that
     * this dialog is complete.
     * 
     * Note:  The selected Configuration file name is presumed valid since it was selected from a list
     * of available file names.  In the future perform a check to ensure that associated test suite exists.
     *
     * @param evt the evt
     */
    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
 
        // Verify that the test name is valid
        FilenameValidator theValidator = new FilenameValidator();
        if (theValidator.validate(this.testNameTextField.getText())) {

            // Verify that a valid config file was selected
            int row = this.testSelectionConfigFileTable.getSelectedRow();
            //Make sure a row was selected first
            if (row > -1) {
                String fileName = (String) this.testSelectionConfigFileTable.getModel().getValueAt(row, 0);
                File f = new File(this.configPathTextField.getText(), fileName);
                if (f.exists()) {
                    okPressed = true;
                    setVisible(false);

                } else {
                    //Pop up the message dialog.
                    String message = "A valid configuration file must be selected. \n"
                            + "\nPlease select a configuration file and try again.";

                    JOptionPane.showMessageDialog(null, //no owner frame
                            message, //text to display
                            "Missing Config File", //title
                            JOptionPane.WARNING_MESSAGE);

                }

            } else {
                //Pop up the message dialog.
                String message = "A valid configuration file must be selected. \n"
                        + "\nPlease select a configuration file and try again.";

                JOptionPane.showMessageDialog(null, //no owner frame
                        message, //text to display
                        "Missing Config File", //title
                        JOptionPane.WARNING_MESSAGE);

            }

        } else {
            //Pop up the message dialog.
            String message = theValidator.getErrorsEncountered()
                    + "\nPlease try again.";

            JOptionPane.showMessageDialog(null, //no owner frame
                    message, //text to display
                    "Invalid File Name", //title
                    JOptionPane.WARNING_MESSAGE);

        }
}//GEN-LAST:event_acceptButtonActionPerformed
    
    /**
     * The user has requested to cancel the operation.
     * 
     * Set the okPressed flag to false, and make the dialog invisible.
     *
     * @param evt the evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        okPressed = false;
        setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * The user has clicked on the path button.
     * 
     * Present the user with a JFileChooser window which was set to only show directories.
     * If the user selected a path then set the configPathTextField to the specified path.  Create 
     * a ConfigFileTableModel object using the file returned from JFileChooser.  Finally, set
     * the testSelectionConfigTable model to the new ConfigFileTableModel object.
     * 
     * @param evt - the pathButton Action Event
     */
    private void pathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathButtonActionPerformed
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        File theLocation = new File(this.testConfigurationPath);
        fc.setCurrentDirectory(theLocation);
        int returnVal = fc.showOpenDialog((javax.swing.JFrame) javax.swing.SwingUtilities.getRoot(this.getParent()));
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            selectedFile = fc.getSelectedFile();
            this.configPathTextField.setText(selectedFile.getAbsolutePath());

            BasicGUIActionWrapper updateConfigFileAction = new BasicGUIActionWrapper(null, "Updating Configuration File List") {

                ConfigFileTableModel model;

                @Override
                protected Boolean actionMethod() throws Exception {
                    testSelectionConfigFileTable.setVisible(false);
                    model = new ConfigFileTableModel(selectedFile);
                    testSelectionConfigFileTable.setModel(model);

                    return true;
                }

                @Override
                protected void wrapUp(Boolean result) {
                    testConfigurationPath = configPathTextField.getText();
                TextAreaRenderer textAreaRenderer = new TextAreaRenderer();
                textAreaRenderer.setLineWrap(true);
                testSelectionConfigFileTable.getColumn("Name").setCellRenderer(textAreaRenderer);
                testSelectionConfigFileTable.getColumn("Description").setCellRenderer(textAreaRenderer);
                    testSelectionConfigFileTable.getColumn("Last Modified").setCellRenderer(new DateRenderer());
                model.fireTableDataChanged();
                    testSelectionConfigFileTable.setVisible(true);
                    testSelectionConfigFileTable.repaint();
                }
            };
            updateConfigFileAction.execute();
        }
    }//GEN-LAST:event_pathButtonActionPerformed

    /**
     * Config path text field action performed.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @param evt the evt
     */
    private void configPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configPathTextFieldActionPerformed
        checkPathUpdate();
    }//GEN-LAST:event_configPathTextFieldActionPerformed

    /**
     * Config path text field focus lost.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @param evt the evt
     */
    private void configPathTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_configPathTextFieldFocusLost
        checkPathUpdate();
    }//GEN-LAST:event_configPathTextFieldFocusLost

    /**
     * When the user selects the emulation check box then enable the re-initialization checkbox.
     * When emulation check box is not selected, clear and disable the re-initialization checkbox.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *     * 
     * @param evt 
     */
    private void jEnableEmulationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEnableEmulationCheckBoxActionPerformed
        if (this.jEnableEmulationCheckBox.isSelected()){
            this.jReinitializeEmulationCheckBox.setEnabled(true);
            this.emulationEnabled = true;
        } else {
            this.jReinitializeEmulationCheckBox.setSelected(false);
            this.jReinitializeEmulationCheckBox.setEnabled(false);
            this.emulationEnabled = false;
            this.emulationReinitialzeEnabled = false;
        }
    }//GEN-LAST:event_jEnableEmulationCheckBoxActionPerformed

    private void jReinitializeEmulationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReinitializeEmulationCheckBoxActionPerformed
        if (this.jReinitializeEmulationCheckBox.isSelected()){
            this.emulationReinitialzeEnabled = true;
        } else {
            this.emulationReinitialzeEnabled = false;
        }
    }//GEN-LAST:event_jReinitializeEmulationCheckBoxActionPerformed

    /**
     * Check path update.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     */
    private void checkPathUpdate() {

        BasicGUIActionWrapper updateConfigFileAction = new BasicGUIActionWrapper(parentFrame, "Updating Configuration File List") {

            ConfigFileTableModel model;

            @Override
            protected Boolean actionMethod() throws Exception {
                File dir = new File(configPathTextField.getText());

                boolean isDir = dir.isDirectory();
                if (isDir) {
                    testSelectionConfigFileTable.setVisible(false);
                    model = new ConfigFileTableModel(dir);

                } else {
                    //Pop up the message dialog.
                    String message = "Invalid file path entered. \n"
                            + "\nPlease try again.";

                    JOptionPane.showMessageDialog(null, //no owner frame
                            message, //text to display
                            "Invalid Path", //title
                            JOptionPane.WARNING_MESSAGE);
                    configPathTextField.setText(testConfigurationPath);
                }
                return true;
            }

            @Override
            protected void wrapUp(Boolean result) {
                testSelectionConfigFileTable.setModel(model);
                testConfigurationPath = configPathTextField.getText();
                TextAreaRenderer textAreaRenderer = new TextAreaRenderer();
                textAreaRenderer.setLineWrap(true);
                testSelectionConfigFileTable.getColumn("Name").setCellRenderer(textAreaRenderer);
                testSelectionConfigFileTable.getColumn("Description").setCellRenderer(textAreaRenderer);
                    testSelectionConfigFileTable.getColumn("Last Modified").setCellRenderer(new DateRenderer());
                model.fireTableDataChanged();
                    testSelectionConfigFileTable.repaint();
                testSelectionConfigFileTable.setVisible(true);

            }
        };

        updateConfigFileAction.execute();


    }

    /**
     * This method presents the TestSelectionUI dialog to the user, and processes the input
     * after the user has either selected OK or Cancel options.
     *
     * Create a ConfigFileTableModel object set to the default path for Config Files.  Finally, set
     * the testSelectionConfigTable model to the new ConfigFileTableModel object.  Then make the dialog
     * visible to the user.
     *
     * When the user closes out the dialog, store the user entered information and return true if the user pressed OK.  If the
     * user pressed cancel, just return false.
     *
     * @return - flag indicating true if the user provided information, and false if the user canceled.
     */
    public boolean showDialog() {
        okPressed = false;
        setVisible(true);
        if (okPressed) {
            this.testName = this.testNameTextField.getText();
            this.testDescription = this.testNotesTextArea.getText();
            this.testConfigurationPath = this.configPathTextField.getText();
            if (this.testSelectionConfigFileTable.getSelectedRow() >= 0) {
                this.testConfiguration = (String) this.testSelectionConfigFileTable.getValueAt(this.testSelectionConfigFileTable.getSelectedRow(), 0);
            }
        }
        setVisible(false);
        return okPressed;
    }

    /**
     * This method is only used for testing purposes and is not used as part of the C2CRI application.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                TestSelectionUI dialog = new TestSelectionUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                File dir = new File(System.getProperty("user.home"));
                ConfigFileTableModel model = new ConfigFileTableModel(dir);
                dialog.testSelectionConfigFileTable.setModel(model);

                dialog.setVisible(true);
            }
        });
    }

    /**
     * Returns the user provided Test Configuration.
     *
     * @return - the selected Test Configuration file name
     */
    public String getTestConfiguration() {
        return testConfiguration;
    }

    /**
     * Returns the user provided Test Configuration Path.
     *
     * @return - the path for the configuration file
     */
    public String getTestConfigurationPath() {
        return testConfigurationPath;
    }

    /**
     * Returns the user provided test description.
     *
     * @return - the test description
     */
    public String getTestDescription() {
        return testDescription;
    }

    /**
     * Returns whether Emulation should be used in testing
     *
     * @return - the emulation enabled setting
     */
    public boolean isEmulationEnabled() {
        return emulationEnabled;
    }

    /**
     * Returns whether Emulation will be reinitialized between test cases.
     *
     * @return - the emulation re-initialize setting
     */
    public boolean isEmulationReinitialzeEnabled() {
        return emulationReinitialzeEnabled;
    }

    
    /**
     * Returns the user provided test name.
     *
     * @return - the test name
     */
    public String getTestName() {
        return testName;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField configPathTextField;
    private javax.swing.JCheckBox jEnableEmulationCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox jReinitializeEmulationCheckBox;
    private javax.swing.JButton pathButton;
    private javax.swing.JLabel testConfigurationLabel;
    private javax.swing.JLabel testNameLabel;
    private javax.swing.JTextField testNameTextField;
    private javax.swing.JLabel testNotesLabel;
    private javax.swing.JLabel testNotesLabel1;
    private javax.swing.JScrollPane testNotesScrollPane;
    private javax.swing.JTextArea testNotesTextArea;
    private javax.swing.JTable testSelectionConfigFileTable;
    private javax.swing.JScrollPane testSelectionScrollPane;
    // End of variables declaration//GEN-END:variables
}
