/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProgressUI.java
 *
 * Created on Jul 15, 2010, 4:50:46 PM
 */

package org.fhwa.c2cri.gui;

import org.fhwa.c2cri.utilities.ProgressReporter;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JLabel;
import javax.swing.Timer;

/**
 * The Class ProgressUI.
 *
 * @author TransCore ITS, LLC
 * Last Updated:  1/8/2014
 */
public class ProgressUI extends javax.swing.JDialog implements ProgressReporter{

    /** The total delay. */
    private static int totalDelay = 500;
    
    /** The timer. */
    Timer timer; //the timer that sets off the dialog message

    /**
     * Creates new form ProgressUI.
     *
     * @param parent the parent
     * @param modal the modal
     */
    public ProgressUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setVisible(false);
        ActionListener taskPerformer = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                setVisible(true);
                timer.stop();
            }
         };
        timer = new Timer(totalDelay, taskPerformer);
    }

    /**
     * Creates new form ProgressUI.
     *
     * @param parent the parent
     * @param modal the modal
     * @param actionTitle the action title
     */
    public ProgressUI(java.awt.Frame parent, boolean modal, String actionTitle) {
        super(parent, modal);
        initComponents();
        this.operationProgressLabel.setText("Waiting for completion of "+actionTitle+".");
        setVisible(false);
        ActionListener taskPerformer = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                setVisible(true);
                timer.stop();
            }
         };
        timer = new Timer(totalDelay, taskPerformer);

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        operationProgressLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Operation in Progress");
        setAlwaysOnTop(true);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        operationProgressLabel.setText("Please wait while the previous request is completed...");

        jProgressBar1.setValue(50);
        jProgressBar1.setIndeterminate(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operationProgressLabel)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(operationProgressLabel)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The main method.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ProgressUI dialog = new ProgressUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /**
     * Start.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     */
    @Override
    public void start() {
 //       operationProgressLabel.setText("");
        timer.start(); // Start the delay Timer
        // Start the Timer
    }

    /**
     * Update.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     *
     * @param updateText the update text
     */
    @Override
    public void update(String updateText) {
        operationProgressLabel.setText(updateText);
        operationProgressLabel.repaint();
    }

    /**
     * Done.
     * 
     * Pre-Conditions: N/A
     * Post-Conditions: N/A
     */
    @Override
    public void done() {
//       operationProgressLabel.setText("");
       timer.stop();
       dispose();  // Clear the dialog
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    /** The j progress bar1. */
    private javax.swing.JProgressBar jProgressBar1;
    
    /** The operation progress label. */
    private javax.swing.JLabel operationProgressLabel;
    // End of variables declaration//GEN-END:variables

}
